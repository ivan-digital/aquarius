"""
Tests for Gradio UI using Selenium to simulate user interactions.
"""
import subprocess
import sys
import time
from typing import Generator

import pytest
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def start_app_process() -> subprocess.Popen:
    """Start the Aquarius API + UI application in a subprocess."""
    # Launch the main application
    cmd = [sys.executable, "-u", "app/main.py"]
    # Capture stdout/stderr to assert MCP server initialization
    return subprocess.Popen(
        cmd,
        cwd=".",
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True
    )


@pytest.fixture(scope="module")
def app_process() -> Generator[subprocess.Popen, None, None]:
    """Pytest fixture to start and stop the application, waiting for UI to be available."""
    proc = start_app_process()
    # Wait for Gradio UI to be ready
    for _ in range(60):
        try:
            requests.get("http://127.0.0.1:7860", timeout=1)
            break
        except Exception:
            time.sleep(1)
    else:
        pytest.skip("Gradio UI did not start")
    yield proc
    proc.kill()


def test_selenium_user_chat(app_process: subprocess.Popen) -> None:
    """Simulate a user asking for recent PyTorch GitHub repo updates."""
    # Wait for Gradio UI to be available
    for _ in range(30):
        try:
            requests.get("http://127.0.0.1:7860", timeout=1)
            break
        except Exception:
            time.sleep(1)
    else:
        pytest.skip("Gradio UI not available")
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    driver = webdriver.Chrome(options=options)

    # Open the Gradio UI
    driver.get("http://127.0.0.1:7860")

    # Wait for the input textbox to appear
    input_box = WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.TAG_NAME, "textarea"))
    )

    # Enter the test query
    input_box.send_keys("Provide pytorch recent github repo updates")

    # Send the message by pressing Enter
    input_box.send_keys(Keys.ENTER)

    # Wait for assistant response text to appear in the page source
    WebDriverWait(driver, 60).until(
        lambda d: "commit" in d.page_source.lower() or "github" in d.page_source.lower()
    )
    body_text = driver.page_source
    # Print exact assistant response
    print("Assistant response:\n", body_text)
    assert "commit" in body_text.lower() or "github" in body_text.lower()
    # Verify GitHub MCP server was initialized
    logs = app_process.stdout.read() or ""
    assert "Loaded" in logs and "GitHub-MCP tools" in logs
    # Clean up
    driver.quit()

# Generated by Copilot
